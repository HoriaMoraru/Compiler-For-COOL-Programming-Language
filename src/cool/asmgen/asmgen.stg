////////////////////////////////////////////////////////////////////////
// Basic sequence rendering
////////////////////////////////////////////////////////////////////////
combineLines(e) ::= "<e; separator=\"\n\">"
spacedLines(e)  ::= "<e; separator=\"\n\n\">"
putWord(item) ::= <<
.word <item>
>>

////////////////////////////////////////////////////////////////////////
// Complete MIPS program generation
////////////////////////////////////////////////////////////////////////
program(
    integerData,
    stringData,
    classNamePointers,
    classProtoPointers,
    protoObjectDefs,
    allDispatchTables,
    classInits,
    methodData
) ::= <<
    ##################################################
    # Data Section Setup
    ##################################################
    .data
    .align 2

    .globl  class_nameTab
    .globl  Int_protObj
    .globl  String_protObj
    .globl  boolFalseConstant
    .globl  boolTrueConstant
    .globl  Main_protObj
    .globl  _int_tag
    .globl  _string_tag
    .globl  _bool_tag

_bool_tag:
    .word  4
_string_tag:
    .word  3
_int_tag:
    .word  2
# Base string constants for base class names
str_const0:
    .word   3
    .word   5
    .word   String_dispTab
    .word   int_const0
    .asciiz ""
    .align  2
str_const1:
    .word   3
    .word   6
    .word   String_dispTab
    .word   int_const1
    .asciiz "Object"
    .align  2
str_const2:
    .word   3
    .word   5
    .word   String_dispTab
    .word   int_const2
    .asciiz "IO"
    .align  2
str_const3:
    .word   3
    .word   5
    .word   String_dispTab
    .word   int_const3
    .asciiz "Int"
    .align  2
str_const4:
    .word   3
    .word   6
    .word   String_dispTab
    .word   int_const1
    .asciiz "String"
    .align  2
str_const5:
    .word   3
    .word   6
    .word   String_dispTab
    .word   int_const4
    .asciiz "Bool"
    .align  2
# Rest of string constants
<stringData>
# Int constants
<integerData>

# Boolean objects
boolFalseConstant:
    .word  4
    .word  4
    .word  Bool_dispTab
    .word  0

boolTrueConstant:
    .word  4
    .word  4
    .word  Bool_dispTab
    .word  1

# Table of class names
class_nameTab:
    .word str_const1
    .word str_const2
    .word str_const3
    .word str_const4
    .word str_const5
    <classNamePointers>

# Table for all class prototypes and initializers
allClassObjects:
    .word Object_protObj
    .word Object_init
    .word IO_protObj
    .word IO_init
    .word Int_protObj
    .word Int_init
    .word String_protObj
    .word String_init
    .word Bool_protObj
    .word Bool_init
    <classProtoPointers>

# Prototypes for base classes
Object_protObj:
    .word 0
    .word 3
    .word Object_dispTab

IO_protObj:
    .word 1
    .word 3
    .word IO_dispTab

Int_protObj:
    .word 2
    .word 4
    .word Int_dispTab
    .word 0

String_protObj:
    .word 3
    .word 5
    .word String_dispTab
    .word int_const0
    .asciiz ""
    .align 2

Bool_protObj:
    .word 4
    .word 4
    .word Bool_dispTab
    .word 0

# Prototypes for rest of classes
<protoObjectDefs>

##################################################
# Dispatch Tables (Method V-Tables)
##################################################
Object_dispTab:
    .word Object.abort
    .word Object.type_name
    .word Object.copy

IO_dispTab:
    .word Object.abort
    .word Object.type_name
    .word Object.copy
    .word IO.out_string
    .word IO.out_int
    .word IO.in_string
    .word IO.in_int

Int_dispTab:
    .word Object.abort
    .word Object.type_name
    .word Object.copy

String_dispTab:
    .word Object.abort
    .word Object.type_name
    .word Object.copy
    .word String.length
    .word String.concat
    .word String.substr

Bool_dispTab:
    .word Object.abort
    .word Object.type_name
    .word Object.copy

<allDispatchTables>

##################################################
# Beginning of Heap
##################################################
    .globl heap_start
heap_start:
    .word 0

##################################################
# Text Section Setup
##################################################
    .text
    .globl  Int_init
    .globl  String_init
    .globl  Bool_init
    .globl  Main_init
    .globl  Main.main

# Object initialization
Object_init:
    addiu  $sp, $sp, -12
    sw     $fp, 12($sp)
    sw     $s0, 8($sp)
    sw     $ra, 4($sp)
    addiu  $fp, $sp, 4
    move   $s0, $a0
    move   $a0, $s0
    lw     $fp, 12($sp)
    lw     $s0, 8($sp)
    lw     $ra, 4($sp)
    addiu  $sp, $sp, 12
    jr     $ra

# IO initialization
IO_init:
    addiu  $sp, $sp, -12
    sw     $fp, 12($sp)
    sw     $s0, 8($sp)
    sw     $ra, 4($sp)
    addiu  $fp, $sp, 4
    move   $s0, $a0
    jal    Object_init
    move   $a0, $s0
    lw     $fp, 12($sp)
    lw     $s0, 8($sp)
    lw     $ra, 4($sp)
    addiu  $sp, $sp, 12
    jr     $ra

# Int initialization
Int_init:
    addiu  $sp, $sp, -12
    sw     $fp, 12($sp)
    sw     $s0, 8($sp)
    sw     $ra, 4($sp)
    addiu  $fp, $sp, 4
    move   $s0, $a0
    jal    Object_init
    move   $a0, $s0
    lw     $fp, 12($sp)
    lw     $s0, 8($sp)
    lw     $ra, 4($sp)
    addiu  $sp, $sp, 12
    jr     $ra

# String initialization
String_init:
    addiu  $sp, $sp, -12
    sw     $fp, 12($sp)
    sw     $s0, 8($sp)
    sw     $ra, 4($sp)
    addiu  $fp, $sp, 4
    move   $s0, $a0
    jal    Object_init
    move   $a0, $s0
    lw     $fp, 12($sp)
    lw     $s0, 8($sp)
    lw     $ra, 4($sp)
    addiu  $sp, $sp, 12
    jr     $ra

# Bool initialization
Bool_init:
    addiu  $sp, $sp, -12
    sw     $fp, 12($sp)
    sw     $s0, 8($sp)
    sw     $ra, 4($sp)
    addiu  $fp, $sp, 4
    move   $s0, $a0
    jal    Object_init
    move   $a0, $s0
    lw     $fp, 12($sp)
    lw     $s0, 8($sp)
    lw     $ra, 4($sp)
    addiu  $sp, $sp, 12
    jr     $ra

# Rest of classes initialization
<classInits>
<methodData>
>>

////////////////////////////////////////////////////////////////////////
// Handling Constants and Prototypes
////////////////////////////////////////////////////////////////////////
intConstantDefinition(tag, val) ::= <<
int_const<tag>:
    .word 2
    .word 4
    .word Int_dispTab
    .word <val>
>>

strConstantDefinition(strTag, size, intTag, textVal) ::= <<
str_const<strTag>:
    .word 3
    .word <size>
    .word String_dispTab
    .word int_const<intTag>
    .asciiz "<textVal>"
    .align 2
>>

createProt(name, tag, size, dispTabName, fieldWords) ::= <<
<name>_protObj:
    .word <tag>
    .word <size>
    .word <dispTabName>_dispTab
    <fieldWords>
>>
////////////////////////////////////////////////////////////////////////
// Initializing classes
////////////////////////////////////////////////////////////////////////
initClass(thisClass, parentClass, attrSetup) ::= <<
<thisClass>_init:
    addiu $sp, $sp, -12
    sw    $fp, 12($sp)
    sw    $s0, 8($sp)
    sw    $ra, 4($sp)
    addiu $fp, $sp, 4
    move  $s0, $a0
    jal   <parentClass>_init
<attrSetup>
    move  $a0, $s0
    lw    $fp, 12($sp)
    lw    $s0, 8($sp)
    lw    $ra, 4($sp)
    addiu $sp, $sp, 12
    jr    $ra
>>
initAndProtAndMethodSet(prot, init, methodSet) ::= <<
<prototype>
<init>
<methodSet>
>>
////////////////////////////////////////////////////////////////////////
// Creating method tables
////////////////////////////////////////////////////////////////////////
createDispatchTable(thisClass, methodSet) ::= <<
<thisClass>_dispTab:
    .word Object.abort
    .word Object.type_name
    .word Object.copy
    <methodSet>
>>
////////////////////////////////////////////////////////////////////////
// MIPS Functions, Stack Handling
////////////////////////////////////////////////////////////////////////
defineMipsMethod(name, bodyInstr, freeParamInstr, freeLocalInstr, prepareLocals) ::= <<
<name>:
    addiu $sp, $sp, -12
    sw    $fp, 12($sp)
    sw    $s0, 8($sp)
    sw    $ra, 4($sp)
    addiu $fp, $sp, 4
<prepareLocals>
    move  $s0, $a0
<bodyInstr>
<freeLocalInstr>
    lw    $fp, 12($sp)
    lw    $s0, 8($sp)
    lw    $ra, 4($sp)
    addiu $sp, $sp, 12
<freeParamInstr>
    jr    $ra
>>

allocLocals(bytes) ::= <<
    addiu $sp, $sp, <bytes>   # local variable space
>>

freeParameters(bytes, paramAlias) ::= <<
    addiu $sp, $sp, <bytes>   # free param: <paramAlias>
>>

invokeMethod(callerExpr, dispatchTag, fileLabel, lineNbr, offsetVal, paramLoads, grabTable) ::= <<
<paramLoads><callerExpr>
    bnez  $a0, dispatchJump<dispatchTag>
    la    $a0, str_const<fileLabel>
    li    $t1, <lineNbr>
    jal   _dispatch_abort
dispatchJump<dispatchTag>:
<grabTable>
    lw    $t1, <offsetVal>($t1)
    jalr  $t1
>>

////////////////////////////////////////////////////////////////////////
// Empty Initialization
////////////////////////////////////////////////////////////////////////
initAsNothing() ::= <<
    move $a0, $zero
>>
